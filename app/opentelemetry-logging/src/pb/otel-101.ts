// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: src/pb/otel-101.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "otel101";

export interface ChargeRequest {
  amount: number;
}

export interface ChargeResponse {
  transactionId: string;
}

export interface DeliveryOrderRequest {
  address: string;
}

export interface DeliveryOrderResponse {
  trackingId: string;
}

export interface DeliveryInquiryRequest {
  trackingId: string;
}

export interface DeliveryInquiryResponse {
  status: string;
}

function createBaseChargeRequest(): ChargeRequest {
  return { amount: 0 };
}

export const ChargeRequest = {
  encode(message: ChargeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).int32(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.amount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargeRequest {
    return { amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0 };
  },

  toJSON(message: ChargeRequest): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargeRequest>, I>>(base?: I): ChargeRequest {
    return ChargeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargeRequest>, I>>(object: I): ChargeRequest {
    const message = createBaseChargeRequest();
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseChargeResponse(): ChargeResponse {
  return { transactionId: "" };
}

export const ChargeResponse = {
  encode(message: ChargeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargeResponse {
    return { transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "" };
  },

  toJSON(message: ChargeResponse): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargeResponse>, I>>(base?: I): ChargeResponse {
    return ChargeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargeResponse>, I>>(object: I): ChargeResponse {
    const message = createBaseChargeResponse();
    message.transactionId = object.transactionId ?? "";
    return message;
  },
};

function createBaseDeliveryOrderRequest(): DeliveryOrderRequest {
  return { address: "" };
}

export const DeliveryOrderRequest = {
  encode(message: DeliveryOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryOrderRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: DeliveryOrderRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryOrderRequest>, I>>(base?: I): DeliveryOrderRequest {
    return DeliveryOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryOrderRequest>, I>>(object: I): DeliveryOrderRequest {
    const message = createBaseDeliveryOrderRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseDeliveryOrderResponse(): DeliveryOrderResponse {
  return { trackingId: "" };
}

export const DeliveryOrderResponse = {
  encode(message: DeliveryOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackingId !== "") {
      writer.uint32(10).string(message.trackingId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trackingId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryOrderResponse {
    return { trackingId: isSet(object.trackingId) ? globalThis.String(object.trackingId) : "" };
  },

  toJSON(message: DeliveryOrderResponse): unknown {
    const obj: any = {};
    if (message.trackingId !== "") {
      obj.trackingId = message.trackingId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryOrderResponse>, I>>(base?: I): DeliveryOrderResponse {
    return DeliveryOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryOrderResponse>, I>>(object: I): DeliveryOrderResponse {
    const message = createBaseDeliveryOrderResponse();
    message.trackingId = object.trackingId ?? "";
    return message;
  },
};

function createBaseDeliveryInquiryRequest(): DeliveryInquiryRequest {
  return { trackingId: "" };
}

export const DeliveryInquiryRequest = {
  encode(message: DeliveryInquiryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackingId !== "") {
      writer.uint32(10).string(message.trackingId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryInquiryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryInquiryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trackingId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryInquiryRequest {
    return { trackingId: isSet(object.trackingId) ? globalThis.String(object.trackingId) : "" };
  },

  toJSON(message: DeliveryInquiryRequest): unknown {
    const obj: any = {};
    if (message.trackingId !== "") {
      obj.trackingId = message.trackingId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryInquiryRequest>, I>>(base?: I): DeliveryInquiryRequest {
    return DeliveryInquiryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryInquiryRequest>, I>>(object: I): DeliveryInquiryRequest {
    const message = createBaseDeliveryInquiryRequest();
    message.trackingId = object.trackingId ?? "";
    return message;
  },
};

function createBaseDeliveryInquiryResponse(): DeliveryInquiryResponse {
  return { status: "" };
}

export const DeliveryInquiryResponse = {
  encode(message: DeliveryInquiryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeliveryInquiryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeliveryInquiryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeliveryInquiryResponse {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: DeliveryInquiryResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeliveryInquiryResponse>, I>>(base?: I): DeliveryInquiryResponse {
    return DeliveryInquiryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeliveryInquiryResponse>, I>>(object: I): DeliveryInquiryResponse {
    const message = createBaseDeliveryInquiryResponse();
    message.status = object.status ?? "";
    return message;
  },
};

/** -------------Payment service----------------- */
export interface PaymentService {
  Charge(request: ChargeRequest): Promise<ChargeResponse>;
}

export const PaymentServiceServiceName = "otel101.PaymentService";
export class PaymentServiceClientImpl implements PaymentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PaymentServiceServiceName;
    this.rpc = rpc;
    this.Charge = this.Charge.bind(this);
  }
  Charge(request: ChargeRequest): Promise<ChargeResponse> {
    const data = ChargeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Charge", data);
    return promise.then((data) => ChargeResponse.decode(new BinaryReader(data)));
  }
}

/** ---------------Delivery Service---------- */
export interface DeliveryService {
  DeliveryOrder(request: DeliveryOrderRequest): Promise<DeliveryOrderResponse>;
  DeliveryInquiry(request: DeliveryInquiryRequest): Promise<DeliveryInquiryResponse>;
}

export const DeliveryServiceServiceName = "otel101.DeliveryService";
export class DeliveryServiceClientImpl implements DeliveryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || DeliveryServiceServiceName;
    this.rpc = rpc;
    this.DeliveryOrder = this.DeliveryOrder.bind(this);
    this.DeliveryInquiry = this.DeliveryInquiry.bind(this);
  }
  DeliveryOrder(request: DeliveryOrderRequest): Promise<DeliveryOrderResponse> {
    const data = DeliveryOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeliveryOrder", data);
    return promise.then((data) => DeliveryOrderResponse.decode(new BinaryReader(data)));
  }

  DeliveryInquiry(request: DeliveryInquiryRequest): Promise<DeliveryInquiryResponse> {
    const data = DeliveryInquiryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeliveryInquiry", data);
    return promise.then((data) => DeliveryInquiryResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
